name: 'yuzu'
run-name: 'Build yuzu'

on:
  workflow_dispatch:
    inputs:
      optimization_flag:
        description: 'OPTIMIZATION_FLAG'
        required: true
        default: 'AVX2'
        type: choice
        options:
        - SSE
        - SSE2
        - AVX
        - AVX2
        - AVX512
      yuzu_use_qt_web_engine:
        description: 'YUZU_USE_QT_WEB_ENGINE'
        required: true
        default: false
        type: boolean
      use_discord_presence:
        description: 'USE_DISCORD_PRESENCE'
        required: true
        default: false
        type: boolean
      enable_cubeb:
        description: 'ENABLE_CUBEB'
        required: true
        default: false
        type: boolean
      enable_libusb:
        description: 'ENABLE_LIBUSB'
        required: true
        default: false
        type: boolean
      enable_web_service:
        description: 'ENABLE_WEB_SERVICE'
        required: true
        default: false
        type: boolean
      yuzu_room:
        description: 'YUZU_ROOM'
        required: true
        default: false
        type: boolean
      yuzu_crash_dumps:
        description: 'YUZU_CRASH_DUMPS'
        required: true
        default: false
        type: boolean

jobs:
  build-msvc:
    name: 'build (windows, msvc)'

    runs-on: windows-2022
    env:
          OPTIMIZATION_FLAG: ${{ inputs.optimization_flag }}
          YUZU_USE_QT_WEB_ENGINE: ${{ inputs.yuzu_use_qt_web_engine }}
          USE_DISCORD_PRESENCE: ${{ inputs.use_discord_presence }}
          ENABLE_CUBEB: ${{ inputs.enable_cubeb }}
          ENABLE_LIBUSB: ${{ inputs.enable_libusb }}
          ENABLE_WEB_SERVICE: ${{ inputs.enable_web_service }}
          YUZU_ROOM: ${{ inputs.yuzu_room }}
          YUZU_CRASH_DUMPS: ${{ inputs.yuzu_crash_dumps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: yuzu-emu/yuzu
          submodules: recursive
          fetch-depth: 0
      - name: Checkout patches
        uses: actions/checkout@v3
        with:
          path: 'patches'
      - name: Apply patches
        shell: pwsh
        run: |
          if ("$env:OPTIMIZATION_FLAG" -eq "SSE") {
              git apply .\patches\patches\cmakelists_SSE.patch
          }
          if ("$env:OPTIMIZATION_FLAG" -eq "SSE2") {
              git apply .\patches\patches\cmakelists_SSE2.patch
          }
          if ("$env:OPTIMIZATION_FLAG" -eq "AVX") {
              git apply .\patches\patches\cmakelists_AVX.patch
          }
          if ("$env:OPTIMIZATION_FLAG" -eq "AVX2") {
              git apply .\patches\patches\cmakelists_AVX2.patch
          }
          if ("$env:OPTIMIZATION_FLAG" -eq "AVX512") {
              git apply .\patches\patches\cmakelists_AVX512.patch
          }
          git apply .\patches\patches\gdbstub.patch
          git apply .\patches\patches\screenshots.patch
          git apply .\patches\patches\upload.patch
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Merge PRs
        shell: pwsh
        run: |
          pip3 install requests urllib3
          python .ci/scripts/merge/apply-patches-by-label.py "mainline-merge" "mainline-merge"
          python .ci/scripts/merge/apply-patches-by-label.py "early-access-merge" "early-access-merge"
      - name: Configure git
        run: |
          git config --global user.email "yuzu@yuzu-emu.org"
          git config --global user.name "yuzubot"
      - name: Install Vulkan SDK
        shell: pwsh
        run: .\.ci\scripts\windows\install-vulkan-sdk.ps1
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        env:
          CC: cl.exe
          CXX: cl.exe
          CXXFLAGS: "/Gw"
        run: |
          glslangValidator --version
          git submodule update --init --recursive
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DYUZU_ENABLE_LTO=ON -DYUZU_USE_BUNDLED_QT=1 -DYUZU_USE_BUNDLED_SDL2=1 -DYUZU_USE_QT_WEB_ENGINE=$env:YUZU_USE_QT_WEB_ENGINE -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF -DYUZU_TESTS=OFF -DUSE_DISCORD_PRESENCE=$env:USE_DISCORD_PRESENCE -DENABLE_QT_TRANSLATION=ON -DDISPLAY_VERSION="early-access" -DCMAKE_BUILD_TYPE=Release -DYUZU_CRASH_DUMPS=$env:YUZU_CRASH_DUMPS -DENABLE_CUBEB=$env:ENABLE_CUBEB -DENABLE_LIBUSB=$env:ENABLE_LIBUSB -DENABLE_WEB_SERVICE=$env:ENABLE_WEB_SERVICE -DYUZU_ROOM=$env:YUZU_ROOM ..
      - name: Build
        run: msbuild "build/yuzu.sln" /m /p:Configuration=Release
      - name: Pack
        shell: pwsh
        run: .\.ci\scripts\windows\upload.ps1
      # - name: Upload
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: windows
      #     path: artifacts/
      # - name: Upload EXE
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: windows(only exe)
      #     path: artifacts/yuzu.exe
      - name: Pack 7z
        shell: cmd
        run:
          7z a -m0=lzma2 -mx=9 -ms=on yuzu-windows.7z artifacts/*
      - name: Upload 7z
        uses: actions/upload-artifact@v3
        with:
          name: yuzu-windows.7z
          path: yuzu-windows.7z
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "yuzu-windows.7z"
          name: "${{ env.time }}"
          body: "${{ env.body }}"
          tag: "release"
          allowUpdates: true
          artifactErrorsFailBuild: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
